def unnamed():
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_tool_voltage(0)
  set_input_actions_to_default()
  set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
  set_payload(0.0)
  set_gravity([0.0, 0.0, 9.82])
  MSG_OUT = 1
  # begin: URCap Installation Node
  #   Source: RG - On Robot, 1.9.0, OnRobot A/S
  #   Type: RG Configuration
  global velocity = [0,0,0,0,0,0,0,0,0]
  global posit = [0,0,0,0,0,0]
  global gripper = [0,0,0]
  global largura = 0
  global target_width = 100
  global target_force = 40
  global measure_width=0
  global grip_detected=False
  global lost_grip=False
  global zsysx=0
  global zsysy=0
  global zsysz=0.06935
  global zsysm=0.7415
  global zmasx=0
  global zmasy=-0
  global zmasz=0.18659
  global zmasm=0
  global zmasm=0
  global zslax=0
  global zslay=0
  global zslaz=0
  global zslam=0
  global zslam=0
  set_tool_voltage(24)
  
    thread rg2_thrd():
		target_width = 40
		x = 0
		while True:
			target_force = 10
			if target_width > 100:
				target_width = 100
			end
			if target_force > 40:
				target_force = 40
			end
			
			payload=0.0
			set_payload=True
			depth_compensation=False
			slave=False
			grip_detected=False
			if slave:
				slave_grip_detected=False
			else:
				master_grip_detected=False
			end
			
			if gripper[1] == 1:
				target_width = 100
			end
			if gripper[2] == 1:
				target_width = 0
			end
			
			if (gripper[1] == 0) and (gripper[2] == 0):
				target_width = largura
			end
		
			def bit(x_width, x_force):
				x_width=x_width+10
				input=floor(x_width)*4
				input=input+floor(x_force/2)*4*111
				input=input+32768
				msb=65536
				local i=0
				local output=0
				while i<17:
					set_digital_out(8,True)
					if input>=msb:
						input=input-msb
						set_digital_out(9,False)
					else:
						set_digital_out(9,True)
					end
					sleep(0.008)
					set_digital_out(8,False)
					sleep(0.008)
					input=input*2
					i=i+1		
				end
				sleep(0.01)
			end
			
			bit(target_width, target_force)
			
			while (gripper[1] == 1) and (gripper[2] == 0):
					sleep(0.05)
			end
			
			while (gripper[1] == 0) and (gripper[2] == 1):
				sleep(0.05)
			end
			if (gripper[1] == 0) and (gripper[2] == 0):
				target_width = largura
				#target_force = 10
			end
			while(gripper[1]  > 1) or (gripper[1] < 0):
				sleep(0.05)		
			end
			while(gripper[2]  > 1) or (gripper[2] < 0):
				sleep(0.05)		
			end
			while(gripper[1] == 1) and (gripper[2] == 1):
				sleep(0.1)	
				target_width = largura
				#target_force = 10	
			end
			bit(target_width, target_force)
			while(gripper[1] == 0) and (gripper[2] == 0):
				sleep(0.05)		
			end
			sleep(0.008)
			sync()
		end
    end 

  set_tool_voltage(24)
  set_tcp(p[0,-0,0.18659,0,-0,0])
  HOSTNAME = "192.168.1.68" # real
  #HOSTNAME = "0.0.0.0" # simulador 
  PORT = 60200
  pi = 3.14159265359
  socket_open(HOSTNAME, PORT)
   
    thread read_data_arm():
		while True:
			
			v_juntas = get_actual_joint_speeds()
			p_juntas = get_actual_joint_positions()
			#t_juntas = get_joint_torques()
			

			

			#signals output
			socket_send_int(p_juntas[0]*1000000)
			socket_send_int(v_juntas[0]*1000000)
			socket_send_int(read_port_register(290))
			socket_send_int(p_juntas[1]*1000000)
			socket_send_int(v_juntas[1]*1000000)
			socket_send_int(read_port_register(291))
			socket_send_int(p_juntas[2]*1000000)
			socket_send_int(v_juntas[2]*1000000)
			socket_send_int(read_port_register(292))
			socket_send_int(p_juntas[3]*1000000)
			socket_send_int(v_juntas[3]*1000000)
			socket_send_int(read_port_register(293))
			socket_send_int(p_juntas[4]*1000000)
			socket_send_int(v_juntas[4]*1000000)
			socket_send_int(read_port_register(294))
			socket_send_int(p_juntas[5]*1000000)
			socket_send_int(v_juntas[5]*1000000)
			socket_send_int(read_port_register(295))
			#########################################
			
			
			sync()
		end
		
	end

	thread read_data_rg2():
		while True:
			a = (get_analog_in(2)-0.026)/2.9760034
  	  		b = a*1.57079633+-0.08726646
  			c = 5.0+110*sin(b)
  			largura = (c*10)/10-9.2
			pose = get_target_tcp_pose()
			speed = get_target_tcp_speed()
			force = get_tcp_force()

			#signals output
			
			#########################################
			socket_send_int(largura*1000000) # position
			socket_send_int(get_analog_in(3)*1000000) # max_effort
			socket_send_int(1000000*get_digital_in(8)) #stado da grarra

			socket_send_int(pose[0]*1000000)
			socket_send_int(pose[1]*1000000)
			socket_send_int(pose[2]*1000000)
			socket_send_int(pose[3]*1000000)
			socket_send_int(pose[4]*1000000)
			socket_send_int(pose[5]*1000000)

			socket_send_int(speed[0]*1000000)
			socket_send_int(speed[1]*1000000)
			socket_send_int(speed[2]*1000000)
			socket_send_int(speed[3]*1000000)
			socket_send_int(speed[4]*1000000)
			socket_send_int(speed[5]*1000000)

			socket_send_int(force[0]*1000000)
			socket_send_int(force[1]*1000000)
			socket_send_int(force[2]*1000000)
			socket_send_int(force[3]*1000000)
			socket_send_int(force[4]*1000000)
			socket_send_int(force[5]*1000000)
			sleep(0.008)
			#sync()
		end
		
	end

	
	thread write_data():
		while True:
			
			# signals input
			velocity = socket_read_binary_integer(8)
			velocity[1] = velocity[1]/1000000.00
			velocity[2] = velocity[2]/1000000.00
			velocity[3] = velocity[3]/1000000.00
			velocity[4] = velocity[4]/1000000.00
			velocity[5] = velocity[5]/1000000.00
			velocity[6] = velocity[6]/1000000.00
			# positions and torque
			gripper[1] = velocity[7]/1000000.00
			gripper[2] = velocity[8]/1000000.00
			
			posit[0] = velocity[1]
			posit[1] = velocity[2]
			posit[2] = velocity[3]
			posit[3] = velocity[4]
			posit[4] = velocity[5]
			posit[5] = velocity[6]

			sync()
		end

	end
	thrd_rg2 = run rg2_thrd() 
	
	thrd_arm = run read_data_arm()
	
	thrd_grip = run read_data_rg2()
	
	thrd_in = run write_data()
	textmsg("WAITING FOR POSITION")
	textmsg("INITIAL VALUES")
	textmsg("q: ", posit[0])
	textmsg("q: ", posit[1])
	textmsg("q: ", posit[2])
	textmsg("q: ", posit[3])
	textmsg("q: ", posit[4])
	textmsg("q: ", posit[5])
	while True:
		#speedj([velocity[1]/4,velocity[1]/4,velocity[1]/4,velocity[1]/4,velocity[1]/4,velocity[1]/4], 50, 0.0001)
		#speedj([0,0,0,0,0,1], 2, 0.0001)
		#speedj([velocity[1],velocity[2],velocity[3],velocity[4],velocity[5],velocity[6]], 5, 0.008)	
		#speedj([posit[0],posit[1],posit[2],posit[3],posit[4],posit[5]], 5, 0.0001)
		speedj([posit[0],posit[1],posit[2],posit[3],posit[4],posit[5]], 5, 0.0001)
		#sync()
	end
end
